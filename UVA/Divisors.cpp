/**
 * code generated by JHelper
 * More info: https://g...content-available-to-author-only...b.com/AlexeyDmitriev/JHelper
 * @author YahiaAshraf74
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include<stack>
#include <complex>
#include <string>
#include <cstring>
#include <random>
#include <bitset>
#include <ios>
#include<iomanip>
#include <stdio.h>
#include <string.h>
#include<fstream>
using namespace std;
const int N = 1e3 + 5, OO = 0x3f3f3f3f;

int numberOfDivisors(int number) {
    int cnt = 0;
    for (int i = 1; i * i <= number; i++) {
        if (number % i == 0) {
            if (i * i != number)
                cnt++;
            cnt++;
        }
    }
    return cnt;
}
class Divisors {
public:
	void solve(istream& cin, ostream& cout) {
        int n ;
        cin >> n ;
        while(n--){
            int l ,u ;
            cin >> l >> u ;
            pair<int,int> mx ;
            for(int num = l ; num <= u;++num){
                int ans = numberOfDivisors(num) ;
                if(ans > mx.second)
                    mx = {num,ans};
            }
            printf("Between %d and %d, %d has a maximum of %d divisors.\n" , l , u , mx.first , mx.second) ;
        }

	}
};

int main() {
//	ios::sync_with_stdio(false),cin.tie(nullptr),cout.tie(nullptr);
	Divisors solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
