/**
 * code generated by JHelper
 * More info: https://g...content-available-to-author-only...b.com/AlexeyDmitriev/JHelper
 * @author YahiaAshraf74
 */

#include <iostream>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include<stack>
#include <complex>
#include <string>
#include <bitset>
#include <stdio.h>
#include <string.h>
#include<fstream>
using namespace std;
#define el	'\n'
#define ll long long
#define clr(a,b)memset(a,b,sizeof(a))
#define all(v)  ((v).begin()),((v).end())
const int N = 1e3 + 5, OO = 0x3f3f3f3f;
vector<pair<int,pair<int,int>>> adj[N];
pair<int,int> path[N][N];
void init(int n){
    for(int i = 0;i<=n;i++)
        adj[i].clear();
    clr(path, OO);
}
void dijkstra(int src){
    priority_queue<pair<pair<int,int>,int>, vector<pair<pair<int,int>,int>>, greater<pair<pair<int,int>,int>>> q;
    path[src][src] = {0,0};
    q.push({{0,0},src});
    while(!q.empty()){
        int u = q.top().second , d = q.top().first.first , t = q.top().first.second;
        q.pop();
        if(d > path[src][u].first || d == path[src][u].first && t > path[src][u].second)
            continue;
        for(auto child : adj[u]){
            int v = child.first , d2 = child.second.first , t2 = child.second.second ;
            int newd = d + d2;
            int newt = t + t2;
            if(path[src][v].first > newd){
                path[src][v].first = newd;
                path[src][v].second = newt;
                q.push({{newd,newt},v});
            }else if(path[src][v].first == newd && path[src][v].second > newt){
                path[src][v].second = newt;
                q.push({{newd,newt},v});
            }
        }

    }
}
class NewToBangladesh {
public:
	void solve(istream& cin, ostream& cout) {
//	    freopen("output.txt","w",stdout);
        int T;
        cin >> T;
        while(T--){
            int n , e;
            cin >> n >> e;
            init(n);
            while(e--){
                int u , v , dist , time;
                cin >> u >> v >> dist >> time;
                adj[u].push_back({v,{dist,time}});
                adj[v].push_back({u,{dist,time}});
            }
            for(int i = 1 ;i <=n;i++)
                dijkstra(i);
            int q;
            cin >> q;
            while(q--){
                int u , v;
                cin >> u >> v;
                if(path[u][v].first == OO){
                    cout << "No Path.\n";
                }else{
                    cout << "Distance and time to reach destination is " << path[u][v].second << " & " << path[u][v].first << ".\n";
                }
            }
            if(T)
                cout << el;
        }
	}
};

int main() {
	ios::sync_with_stdio(false),cin.tie(nullptr),cout.tie(nullptr);
	NewToBangladesh solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
