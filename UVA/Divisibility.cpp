/**
 * code generated by JHelper
 * More info: https://g...content-available-to-author-only...b.com/AlexeyDmitriev/JHelper
 * @author YahiaAshraf74
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <queue>
#include<stack>
#include <complex>
#include <string>
#include <cstring>
#include <random>
#include <bitset>
#include <ios>
#include<iomanip>
#include <stdio.h>
#include <string.h>
#include<fstream>
using namespace std;
const int N = 1e3 + 5, OO = 0x3f3f3f3f;

class DivisibilityOfFactors {
public:
	void solve(istream& cin, ostream& cout) {
        int n , d ;
        while(cin>> n>>d){
            if(n+d==0)
                break;
            auto getPrimeFactorization = [](int num , map<int,int> &factors){
                for(int i = 2 , d =1 ; i * i <= num ; i+=d , d=2){
                    while (num % i == 0) {
                        num /= i;
                        factors[i]++;
                    }
                }
                if(num != 1)
                    factors[num]++;
            };
            map<int,int> factorsN , factorsD;
            for(int i = 2 ; i <= n;++i)
                getPrimeFactorization(i,factorsN);
            getPrimeFactorization(d,factorsD) ;
            bool flag = true;
            for(auto it : factorsD){
                factorsN[it.first] -= it.second ;
                if(factorsN[it.first] < 0){
                    flag = false;
                    break;
                }
            }
            if(flag){
                long long ans = 1;
                for(auto it : factorsN){
                    ans *= it.second+1 ;
                }
                cout << ans << '\n';
            }else{
                cout << 0 << '\n';
            }
        }
	}
};

int main() {
	ios::sync_with_stdio(false),cin.tie(nullptr),cout.tie(nullptr);
	DivisibilityOfFactors solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
